diff -ru riak-1.4.2.orig/deps/node_package/priv/base/runner riak-1.4.2/deps/node_package/priv/base/runner
--- riak-1.4.6.orig/deps/node_package/priv/base/runner	2013-11-09 02:56:54.000000000 +0800
+++ riak-1.4.6/deps/node_package/priv/base/runner	2014-02-10 16:42:55.045733122 +0800
@@ -17,8 +17,17 @@
 # Identify the script name
 SCRIPT=`basename $0`
 
+export CR_DEBUG_LEVEL=0
+
+PROXY_PROG=""
+PROXY_LISTEN_PORT=8086
+PROXY_SERVER_PORT=8087
+
+PROXY_PID_FILE="${HOME}/.riak-proxy.pid"
+PROXY_LOG_FILE="${HOME}/.riak-proxy.log"
+
 usage() {
-    echo "Usage: $SCRIPT {start | stop| restart | reboot | ping | console | attach | "
+    echo "Usage: $SCRIPT {start | stop | proxy-restart | restart | reboot | ping | console | attach | "
     echo "                    attach-direct | ertspath | chkconfig | escript | version | "
     echo "                    getpid | top [-interval N] [-sort reductions|memory|msg_q] [-lines N] }"
 }
@@ -51,6 +60,24 @@
 
 # Check the first argument for instructions
 case "$1" in
+    proxy-restart)
+        # Stop proxy
+        if [ -f "${PROXY_PID_FILE}" ]; then
+            pkill -9 `basename ${PROXY_PROG}` > /dev/null 2>&1
+            rm -f "${PROXY_PID_FILE}"
+        fi
+
+        # Start proxy
+        if [ -x "${PROXY_PROG}" ]; then
+            if [ "A${PROXY_LOG_FILE}" != "A" ]; then
+                ${PROXY_PROG} ${PROXY_LISTEN_PORT} ${PROXY_SERVER_PORT} > "${PROXY_LOG_FILE}" 2>&1 &
+            else
+                ${PROXY_PROG} ${PROXY_LISTEN_PORT} ${PROXY_SERVER_PORT} > /dev/null 2>&1 &
+            fi
+            echo "${!}" > ${PROXY_PID_FILE}
+        fi
+        ;;
+
     start)
         # Bootstrap daemon command (check perms & drop to $RUNNER_USER)
         bootstrapd $@
@@ -77,6 +104,22 @@
         $ERTS_PATH/run_erl -daemon $PIPE_DIR/ $RUNNER_LOG_DIR \
             "exec $RUNNER_SCRIPT_DIR/$RUNNER_SCRIPT console" 2>&1
 
+        # Stop proxy
+        if [ -f "${PROXY_PID_FILE}" ]; then
+            pkill -9 `basename ${PROXY_PROG}` > /dev/null 2>&1
+            rm -f "${PROXY_PID_FILE}"
+        fi
+
+        # Start proxy
+        if [ -x "${PROXY_PROG}" ]; then
+            if [ "A${PROXY_LOG_FILE}" != "A" ]; then
+                ${PROXY_PROG} ${PROXY_LISTEN_PORT} ${PROXY_SERVER_PORT} > "${PROXY_LOG_FILE}" 2>&1 &
+            else
+                ${PROXY_PROG} ${PROXY_LISTEN_PORT} ${PROXY_SERVER_PORT} > /dev/null 2>&1 &
+            fi
+            echo "${!}" > ${PROXY_PID_FILE}
+        fi
+
         if [ ! -z "$WAIT_FOR_PROCESS" ]; then
             # Wait for the node to come up. We can't just ping it because
             # distributed erlang comes up for a second before the node crashes
@@ -114,6 +157,12 @@
         ;;
 
     stop)
+        # Stop proxy
+        if [ -f "${PROXY_PID_FILE}" ]; then
+            pkill -9 `basename ${PROXY_PROG}` > /dev/null 2>&1
+            rm -f "${PROXY_PID_FILE}"
+        fi
+
         # Bootstrap daemon command (check perms & drop to $RUNNER_USER)
         bootstrapd $@
 
diff -ru riak-1.4.2.orig/rel/files/app.config riak-1.4.2/rel/files/app.config
--- riak-1.4.2.orig/rel/files/app.config	2013-08-30 02:13:02.000000000 +0800
+++ riak-1.4.2/rel/files/app.config	2013-10-15 19:59:22.993530034 +0800
@@ -22,7 +22,7 @@
 
               %% Default ring creation size.  Make sure it is a power of 2,
               %% e.g. 16, 32, 64, 128, 256, 512 etc
-              %{ring_creation_size, 64},
+              {ring_creation_size, 64},
 
               %% http is a list of IP addresses and TCP ports that the Riak
               %% HTTP interface will bind.
@@ -80,7 +80,34 @@
  {riak_kv, [
             %% Storage_backend specifies the Erlang module defining the storage
             %% mechanism that will be used on this node.
-            {storage_backend, riak_kv_bitcask_backend},
+            {storage_backend, riak_kv_multi_backend},
+            {multi_backend_default, <<"bitcask_bigval">>},
+            {multi_backend, [
+                %% Here's where you set the individual multiplexed backends
+                {<<"bitcask_bigval">>,  riak_kv_bitcask_backend, [
+                    %% bitcask big-value configuration
+                    {max_file_size, 16#100000000},          %% 4GBytes per file
+                    %% Trigger a merge if any of the following are true:
+                    {frag_merge_trigger, 50},               %% fragmentation >= 50%
+                    {dead_bytes_merge_trigger, 1073741824}, %% dead bytes > 1GB
+                    %% Conditions that determine if a file will be examined during a merge:
+                    {frag_threshold, 30},                   %% fragmentation >= 30%
+                    {dead_bytes_threshold, 268435456},      %% dead bytes > 256MB
+                    {small_file_threshold, 134217728},      %% file is < 128MB
+
+                    {expiry_secs, -1}                       %% Don't expire items based on time
+                ]},
+                {<<"eleveldb_default">>, riak_kv_eleveldb_backend, [
+                    %% eleveldb configuration
+                    {verify_checksums, true},               %% Default. Strongly recommended to be true
+                    {verify_compactions, true}              %% Default. Strongly recommended to be true
+                ]},
+                {<<"memory_cache">>,   riak_kv_memory_backend, [
+                    %% memory configuration
+                    {max_memory, 16},                       %% 16M bytes per vnode
+                    {ttl, 3600}                             %% 1 Hour in seconds before object expire
+                ]}
+            ]},
 
             %% raw_name is the first part of all URLS used by the Riak raw HTTP
             %% interface.  See riak_web.erl and raw_http_resource.erl for
@@ -229,6 +256,8 @@
              %% and possible throughput collapse.
              {io_mode, erlang},
 
+             {merge_window, {3, 8}},                 %% merge data file at AM3:00~AM7:00
+
              {data_root, "{{bitcask_data_root}}"}
            ]},
 
